{"version":3,"sources":["Checkbox/index.js","TextInput/index.js","Selector/index.js","Block/index.js","App.js","index.js"],"names":["Checkbox","active","disabled","error","errorTip","customStylesContainer","children","onChange","console","errorTipContainer","className","style","classname","checkbox__inner","type","checked","TextInput","placeholder","value","undefined","tagType","defaultValue","onInput","event","target","Selector","fetching","multiple","items","CheckboxComponent","BlockComponent","FetchingComponent","Error","_handleOnChange","id","flag","filter","_id","selector","selector__block","title","map","item","index","key","includes","marginBottom","length","text","name","Block","BlockTitle","ExampleContainer","TextInputExample","val","log","maxWidth","CheckboxExample","SelectorExample","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.85d9f441.chunk.js","sourcesContent":["import React from 'react';\nimport classname from 'classname';\nimport PropTypes from 'prop-types';\nimport './Checkbox.scss';\n\n/**\n * Simple checkbox component\n */\nexport function Checkbox({\n  active = false,\n  disabled = false,\n  error = false,\n  errorTip = 'Something went wrong',\n  customStylesContainer = {},\n  children = 'Checkbox text',\n  onChange = () => { console.error('onChange callback missed!') },\n}) {\n  const errorTipContainer = error\n    ? (\n      <div className={ `checkbox__error-container` }>\n        { errorTip }\n      </div>\n    )\n    : null;\n\n  return (\n    <div className='checkbox' style={ customStylesContainer }>\n      <label\n        className={ classname({\n          checkbox__inner: true,\n          'checkbox__inner--disabled': disabled,\n          'checkbox__inner--active': active,\n          'checkbox__inner--error': error\n        }) }\n      >\n        <input\n          className='checkbox__tag'\n          type='checkbox'\n          checked={ active }\n          disabled={ disabled }\n          onChange={ onChange }\n        />\n        <span className='checkbox__content'>{ children }</span>\n      </label>\n      { errorTipContainer }\n    </div>\n  );\n}\n\nCheckbox.propTypes = {\n  /**\n   * Checked flag\n   */\n  active: PropTypes.bool,\n  /**\n   * Disabled flag\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Error flag\n   */\n  error: PropTypes.bool,\n  /**\n   * Error tip\n   */\n  errorTip: PropTypes.node,\n  /**\n   * Custom styles for main container\n   */\n  customStylesContainer: PropTypes.object,\n  /**\n   * Label of checkbox\n   */\n  children: PropTypes.node,\n  /**\n   * onChange listener\n   */\n  onChange: PropTypes.func\n};\n","import React from 'react';\nimport classname from 'classname';\nimport PropTypes from 'prop-types';\nimport './TextInput.scss';\n\n/**\n * Simple text input component with flow-placeholder and mobile-ready\n */\nexport function TextInput({\n  placeholder = 'Input placeholder',\n  value = undefined,\n  disabled = false,\n  error = false,\n  errorTip = 'Something went wrong',\n  onChange = () => console.error('onChange callback missed!'),\n  customStylesContainer = {},\n  tagType = 'text'\n}) {\n  const errorTipContainer = error\n    ? (\n      <div className='text-input__error-container'>\n        { errorTip }\n      </div>\n    )\n    : null;\n\n  return (\n    <div className='text-input' style={ customStylesContainer }>\n      <div\n        className={ classname({\n          'text-input__inner': true,\n          'text-input__inner--disabled': disabled,\n          'text-input__inner--error': error\n        }) }\n      >\n        <input\n          className={ classname({\n            'text-input__tag': true,\n            'text-input__tag--disabled': disabled,\n            'text-input__tag--error': error\n          }) }\n          type={ tagType }\n          placeholder=' '\n          defaultValue={ value }\n          onInput={ event => onChange(event.target.value) }\n          disabled={ disabled }\n        />\n        <span\n          className={ classname({\n            'text-input__placeholder': true,\n            'text-input__placeholder--disabled': disabled,\n            'text-input__placeholder--error': error\n          }) }\n        >{ placeholder }</span>\n      </div>\n      { errorTipContainer }\n    </div>\n  );\n}\n\nTextInput.propTypes = {\n  /**\n   * Placeholder; not input-tag attribute!\n   */\n  placeholder: PropTypes.node,\n  /**\n   * Value; will be used in input-tag as defaultValue\n   */\n  value: PropTypes.string,\n  /**\n   * If passed in props, input will be marked as disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If passed in props, input will be marked as errored\n   */\n  error: PropTypes.bool,\n  /**\n   * Error text, can be string or another component\n   */\n  errorTip: PropTypes.node,\n  /**\n   * Callback, will be used as onInput at input-tag\n   */\n  onChange: PropTypes.func,\n  /**\n   * custom styles for main container, example: `{ maxWidth: 'unset' }`\n   */\n  customStylesContainer: PropTypes.object,\n  /**\n   * use for extend input-tag type\n   */\n  tagType: PropTypes.string\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classname from 'classname';\nimport './Selector.scss';\n\nexport function Selector({\n  error = false,\n  errorTip = 'Something went wrong',\n  disabled = false,\n  fetching = false,\n  multiple = false,\n  placeholder = 'Selector placeholder',\n  items = [],\n  value = [],\n  customStylesContainer = {},\n  onChange = value => console.error('onChange callback missed, btw value is', value),\n  CheckboxComponent,\n  BlockComponent,\n  FetchingComponent\n}) {\n  if (CheckboxComponent === undefined || CheckboxComponent === null) {\n    throw new Error('`CheckboxComponent` should be passed!');\n  }\n\n  if (BlockComponent === undefined || BlockComponent === null) {\n    throw new Error('`BlockComponent` should be passed!');\n  }\n\n  if (fetching) {\n    if (FetchingComponent === undefined || FetchingComponent === null) {\n      throw new Error('`FetchingComponent` should be passed!');\n    }\n  }\n\n  const errorTipContainer = error\n    ? (\n      <div className='selector__error-container'>\n        { errorTip }\n      </div>\n    )\n    : null;\n\n  const _handleOnChange = (id, flag) => {\n    if (flag) {\n      onChange(multiple ? [ ...value, id ] : [ id ]);\n    } else {\n      onChange(value.filter(_id => _id !== id));\n    }\n  };\n\n  return (\n    <div\n      className={ classname({\n        selector: true,\n        'selector--error': error,\n        'selector--disabled': disabled,\n        'selector--fetching': fetching,\n      }) }\n      style={ customStylesContainer }\n    >\n      <BlockComponent\n        className={ classname({\n          selector__block: true,\n          'selector__block--error': error,\n          'selector__block--disabled': disabled,\n          'selector__block--fetching': fetching,\n        }) }\n        title={ placeholder }\n      >\n        { fetching\n          ? <FetchingComponent />\n          : items.map((item, index) => (\n            <CheckboxComponent\n              key={ item.id }\n              active={ value.includes(item.id) }\n              onChange={ value => _handleOnChange(item.id, value) }\n              disabled={ disabled }\n              customStylesContainer={ { marginBottom: items.length - 1 === index ? '' : '10px' } }\n            >\n              { item.text || item.name || item.title }\n            </CheckboxComponent>\n          ))\n        }\n      </BlockComponent>\n      { errorTipContainer }\n    </div>\n  );\n}\n\nSelector.propTypes = {\n  error: PropTypes.bool,\n  errorTip: PropTypes.node,\n  disabled: PropTypes.bool,\n  fetching: PropTypes.bool,\n  multiple: PropTypes.bool,\n  placeholder: PropTypes.node,\n  items: PropTypes.array,\n  value: PropTypes.array,\n  CheckboxComponent: PropTypes.node.isRequired,\n  BlockComponent: PropTypes.node.isRequired,\n  FetchingComponent: PropTypes.node\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Block.scss';\n\nexport function Block ({\n  className = '',\n  style = {},\n  title = undefined,\n  children\n}) {\n  return (\n    <div className={ `light-block ${ className }` } style={ style }>\n      { title !== undefined\n        ? <BlockTitle>{ title }</BlockTitle>\n        : null\n      }\n      { children }\n    </div>\n  );\n}\n\nBlock.propTypes = {\n  title: PropTypes.node,\n  style: PropTypes.object,\n  children: PropTypes.node,\n  className: PropTypes.string\n};\n\nexport function BlockTitle ({ children }) {\n  return (\n    <span className='light-block__title'>{ children }</span>\n  );\n}\n\nBlockTitle.propTypes = {\n  children: PropTypes.node\n};\n","import React from 'react';\nimport { Checkbox } from './Checkbox';\nimport { TextInput } from './TextInput';\nimport { Selector } from './Selector';\nimport { Block } from './Block';\nimport './App.css';\n\nfunction ExampleContainer({ children }) {\n  return (\n    <div className='example-container'>\n      { children }\n    </div>\n  );\n}\n\nfunction TextInputExample() {\n  return (\n    <ExampleContainer>\n      <h3>TextInput component examples</h3>\n\n      <TextInput\n        placeholder='Фамилия сотрудника'\n        value='Горюнов'\n        disabled\n        onChange={ val => console.log({ val }) }\n      />\n\n      <br/>\n\n      <TextInput\n        placeholder='Фамилия сотрудника'\n        onChange={ val => console.log({ val }) }\n      />\n\n      <br/>\n\n      <TextInput\n        placeholder='Фамилия сотрудника'\n        value='Горюнов'\n        onChange={ val => console.log({ val }) }\n      />\n\n      <br/>\n\n      <TextInput\n        placeholder='Фамилия сотрудника'\n        error\n        errorTip={ (\n          <>\n            <span>Поле не может быть пустым! </span>\n            <br />\n            <span>Укажите фамилию, например <b>Горюнов</b></span>\n          </>\n        ) }\n        onChange={ value => console.log(value) }\n      />\n\n      <br/>\n\n      <TextInput\n        placeholder='Фамилия сотрудника'\n        value='Горюнов111'\n        error\n        errorTip={ 'Фамилия не может содержать символы, отличные от букв' }\n        onChange={ val => console.log({ val }) }\n      />\n\n      <br />\n\n      <TextInput\n        placeholder='420px width'\n        customStylesContainer={ { maxWidth: '420px' } }\n        onChange={ val => console.log({ val }) }\n      />\n    </ExampleContainer>\n  )\n}\n\nfunction CheckboxExample() {\n  return (\n    <ExampleContainer>\n      <h3>Checkbox component examples</h3>\n\n      <Checkbox>Учитывать все цены</Checkbox>\n\n      <br />\n\n      <Checkbox active>Учитывать <b>все цены</b></Checkbox>\n\n      <br />\n\n      <Checkbox disabled>Учитывать все цены</Checkbox>\n\n      <br />\n\n      <Checkbox active disabled>Учитывать <b>все цены</b></Checkbox>\n\n      <br />\n\n      <Checkbox\n        error\n        errorTip='Вы должны быть согласны :^)'\n      >Я согласен с правилами сервиса</Checkbox>\n\n      <br />\n\n      <Checkbox\n        error\n        errorTip={\n          <b>Это обязательное поле!</b>\n        }\n      >Я согласен с правилами сервиса</Checkbox>\n    </ExampleContainer>\n  );\n}\n\nfunction SelectorExample () {\n  return (\n    <ExampleContainer>\n      <h3>Selector component example</h3>\n\n      <Selector\n        CheckboxComponent={ Checkbox }\n        BlockComponent={ Block }\n        placeholder='Главный менеджер клиента'\n        items={ [\n          { id: 1, text: 'Менеджер 1' },\n          { id: 2, text: 'Менеджер 2' },\n          { id: 3, text: 'Менеджер 3' },\n        ] }\n        value={ [2, 3] }\n      />\n\n      <br />\n\n      <Selector\n        CheckboxComponent={ Checkbox }\n        BlockComponent={ Block }\n        placeholder='Главный менеджер клиента'\n        items={ [\n          { id: 1, text: 'Менеджер 1' },\n          { id: 2, text: 'Менеджер 2' },\n          { id: 3, text: 'Менеджер 3' },\n        ] }\n        value={ [] }\n        error\n        errorTip='Нужно указать менеджера'\n      />\n\n      <br />\n\n      <Selector\n        CheckboxComponent={ Checkbox }\n        BlockComponent={ Block }\n        placeholder='Главный менеджер клиента'\n        items={ [\n          { id: 1, text: 'Менеджер 1' },\n          { id: 2, text: 'Менеджер 2' },\n          { id: 3, text: 'Менеджер 3' },\n        ] }\n        value={ [2, 3] }\n        disabled\n      />\n\n      <br />\n\n      <Selector\n        CheckboxComponent={ Checkbox }\n        BlockComponent={ Block }\n        FetchingComponent={ () => (<div>Загрузка...</div>) }\n        placeholder='Главный менеджер клиента'\n        items={ [] }\n        value={ [] }\n        fetching\n      />\n    </ExampleContainer>\n  )\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <a href='styleguide/index.html'>Go to styleguide page (extended documentation)</a>\n\n      <hr />\n\n      <div className='examples'>\n        <TextInputExample />\n        <CheckboxExample />\n        <SelectorExample />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}